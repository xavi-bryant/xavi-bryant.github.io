{"total":2,"pageSize":10,"pageCount":1,"data":[{"title":"","slug":"day04笔记","date":"2019-07-21T18:18:52.416Z","updated":"2019-07-19T06:51:13.283Z","comments":true,"path":"api/articles/day04笔记.json","excerpt":"","keywords":null,"cover":"mdImg/flex-start.png","content":"<h1 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h1><blockquote>\n<ul>\n<li><input disabled type=\"checkbox\"> 能够说出响应式开发的基本概念</li>\n<li><input disabled type=\"checkbox\"> 了解响应式开发的原理</li>\n<li><input disabled type=\"checkbox\"> 了解bootstrap的栅格系统的使用</li>\n</ul>\n<p>。。。。。。</p>\n</blockquote>\n<p><strong>理解上课的知识点……</strong></p>\n<h1 id=\"弹性布局-伸缩布局\"><a href=\"#弹性布局-伸缩布局\" class=\"headerlink\" title=\"弹性布局(伸缩布局)\"></a>弹性布局(伸缩布局)</h1><blockquote>\n<p>布局：其实就是调整元素在水平和垂直方向上的布局方式。</p>\n</blockquote>\n<p>css3在布局中提出了flex布局（弹性布局）的方法，这种布局方式让我们对于元素的排布更加灵活，适应性也更强，在响应式开发中使用的较多。</p>\n<h5 id=\"ヾ-๑╹◡╹-ﾉ”伸缩布局的初体验\"><a href=\"#ヾ-๑╹◡╹-ﾉ”伸缩布局的初体验\" class=\"headerlink\" title=\"ヾ(๑╹◡╹)ﾉ”伸缩布局的初体验\"></a>ヾ(๑╹◡╹)ﾉ”伸缩布局的初体验</h5><blockquote>\n<p>使用伸缩布局让一个子盒子在父盒子中水平垂直居中</p>\n</blockquote>\n<ul>\n<li><p>之前使用子绝父相完成</p>\n</li>\n<li><p>通过flex布局，三行代码完成</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 设置当前盒子为弹性盒子*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">flex</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 设置主轴方向的对齐方式：justify-content */</span></span><br><span class=\"line\"><span class=\"selector-tag\">justify-content</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 设置侧轴方向的对齐方式：align-items */</span></span><br><span class=\"line\"><span class=\"selector-tag\">align-items</span>: <span class=\"selector-tag\">center</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>设置了 <code>display：flex;</code> 的盒子会变成一个<strong>弹性盒子</strong>。弹性盒子会多出了<strong>主轴</strong>和<strong>侧轴</strong>的概念。</p>\n<p><strong>主轴：</strong> <strong>默认水平向右</strong> （类似于x轴）</p>\n<p><strong>侧轴：</strong>与主轴垂直的就是侧轴，<strong>默认垂直向下</strong>（类似于y轴）</p>\n<p>弹性盒子内部的子<strong>元素会默认沿着主轴方向</strong> 排布，默认水平向右布局。（类似于羊肉串）</p>\n<hr>\n<blockquote>\n<p>接下来学习一些flex布局中相关的属性</p>\n</blockquote>\n<h2 id=\"主轴方向（flex-direction）（了解）\"><a href=\"#主轴方向（flex-direction）（了解）\" class=\"headerlink\" title=\"主轴方向（flex-direction）（了解）\"></a>主轴方向（flex-direction）（了解）</h2><blockquote>\n<p>弹性盒子中主轴方向默认是水平向右的。</p>\n<p>但是其实可以通过<code>flex-diretion</code> 属性修改主轴的方向（一般很少改变）</p>\n</blockquote>\n<p><strong>取值（主轴方向）：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">取值</th>\n<th align=\"center\">效果（主轴方向）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">row</td>\n<td align=\"center\">水平向右（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">row-reverse</td>\n<td align=\"center\">水平向左</td>\n</tr>\n<tr>\n<td align=\"center\">column</td>\n<td align=\"center\">垂直向下</td>\n</tr>\n<tr>\n<td align=\"center\">column-reverse</td>\n<td align=\"center\">垂直向上</td>\n</tr>\n</tbody></table>\n<h2 id=\"主轴对齐方式（justify-content）（重点）\"><a href=\"#主轴对齐方式（justify-content）（重点）\" class=\"headerlink\" title=\"主轴对齐方式（justify-content）（重点）\"></a>主轴对齐方式（justify-content）（重点）</h2><blockquote>\n<p>元素在主轴上排布，可以通过 <code>justify-content</code> 属性设置元素的对齐方式</p>\n</blockquote>\n<p><strong>取值：</strong></p>\n<ul>\n<li><p><strong>flex-start：向主轴的开始位置对齐</strong></p>\n<blockquote>\n<p>默认相当于左对齐</p>\n</blockquote>\n<p><img src=\"mdImg/flex-start.png\" alt=\"flex-start\"></p>\n</li>\n<li><p><strong>flex-end：向主轴的结束位置对齐</strong></p>\n<blockquote>\n<p>默认相当于右对齐</p>\n</blockquote>\n<p><img src=\"mdImg/flex-end.png\" alt=\"flex-end\"></p>\n</li>\n<li><p><strong>center：居中对齐</strong></p>\n<p><img src=\"mdImg/center.png\" alt=\"center\"></p>\n</li>\n<li><p><strong>space-around：让空白环绕盒子显示</strong></p>\n<p><img src=\"mdImg/space-around.png\" alt=\"space-around\"></p>\n</li>\n<li><p><strong>space-between：让空白只在盒子之间显示</strong></p>\n<p><img src=\"mdImg/space-between.png\" alt=\"space-between\"></p>\n</li>\n</ul>\n<h2 id=\"单行侧轴对齐方式（align-items）（重点）\"><a href=\"#单行侧轴对齐方式（align-items）（重点）\" class=\"headerlink\" title=\"单行侧轴对齐方式（align-items）（重点）\"></a>单行侧轴对齐方式（align-items）（重点）</h2><blockquote>\n<p>可以通过 <code>align-items</code> 设置单行元素在侧轴的对齐方式。 </p>\n</blockquote>\n<p><strong>取值：</strong></p>\n<ul>\n<li><p><strong>flex-start：向侧轴的开始位置对齐</strong></p>\n<p><img src=\"mdImg/aflex-start.png\" alt=\"aflex-start\"></p>\n</li>\n<li><p><strong>flex-end：向侧轴的结束位置对齐</strong></p>\n<p><img src=\"mdImg/aflex-end.png\" alt=\"aflex-end\"></p>\n</li>\n<li><p><strong>center：居中对齐</strong></p>\n<p><img src=\"mdImg/acenter.png\" alt=\"acenter\"></p>\n</li>\n<li><p><strong>stretch：让子盒子的高度拉伸显示（默认值）</strong></p>\n<blockquote>\n<p>只有当子元素没有高度时，才会有拉伸效果（否则以设置的高度为准）</p>\n</blockquote>\n<p><img src=\"mdImg/astretch.png\" alt=\"astretch\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"是否换行（flex-wrap）\"><a href=\"#是否换行（flex-wrap）\" class=\"headerlink\" title=\"是否换行（flex-wrap）\"></a>是否换行（flex-wrap）</h2><blockquote>\n<p>flex布局中，默认是单行显示的，如果子元素的宽度之和超出了父元素的宽度，此时子盒子会默认压缩显示。</p>\n<p>此时，如果需要设置子元素换行显示，可以使用属性 <code>flex-wrap</code></p>\n</blockquote>\n<p><strong>取值：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性值</th>\n<th align=\"center\">效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">nowrap</td>\n<td align=\"center\">不换行（默认值）</td>\n</tr>\n<tr>\n<td align=\"center\">wrap</td>\n<td align=\"center\">换行</td>\n</tr>\n</tbody></table>\n<h2 id=\"多行侧轴对齐方式（align-content）\"><a href=\"#多行侧轴对齐方式（align-content）\" class=\"headerlink\" title=\"多行侧轴对齐方式（align-content）\"></a>多行侧轴对齐方式（align-content）</h2><blockquote>\n<p>之前学习的 <code>align-items</code> 只是针对于单行元素的侧轴对齐方式。</p>\n<p>如果需要设置多行元素的侧轴对齐方式，此时需要使用 <code>align-content</code> 才行</p>\n</blockquote>\n<p><strong>取值（和align-items差不多）：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">取值</th>\n<th align=\"center\">效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">flex-start</td>\n<td align=\"center\">向侧轴的开始位置对齐</td>\n</tr>\n<tr>\n<td align=\"center\">flex-end</td>\n<td align=\"center\">向侧轴的结束位置对齐</td>\n</tr>\n<tr>\n<td align=\"center\">center</td>\n<td align=\"center\">居中对齐</td>\n</tr>\n<tr>\n<td align=\"center\">stretch</td>\n<td align=\"center\">子元素高度拉伸显示（只有没设高才有效果）</td>\n</tr>\n<tr>\n<td align=\"center\">space-around</td>\n<td align=\"center\">空白环绕盒子显示</td>\n</tr>\n<tr>\n<td align=\"center\">space-between</td>\n<td align=\"center\">空白只在盒子之间显示</td>\n</tr>\n</tbody></table>\n<p><strong>align-items与align-content的区别：</strong></p>\n<ul>\n<li>如果子元素没有换行，<strong>只有一行</strong>的时候使用 <code>align-items</code></li>\n<li>如果子元素有<strong>多行</strong>，此时使用 <code>align-content</code></li>\n</ul>\n<hr>\n<p>学习到这里，给父元素设置的相关样式已经说完了，稍微小结一下！</p>\n<hr>\n<p>以下都是给子元素设置的相关属性~</p>\n<h2 id=\"分配子元素空间（flex属性）（使用较多）\"><a href=\"#分配子元素空间（flex属性）（使用较多）\" class=\"headerlink\" title=\"分配子元素空间（flex属性）（使用较多）\"></a>分配子元素空间（flex属性）（使用较多）</h2><blockquote>\n<p>可以通过flex属性设置子元素的分配的空间</p>\n</blockquote>\n<p><strong>作用：</strong> 按照份数分配父元素主轴（宽度）的剩余空间</p>\n<blockquote>\n<p>优先分配具体的宽度，剩余的空间再按照分数分配。</p>\n</blockquote>\n<p><strong>代码：</strong> <code>flex:份数;</code></p>\n<p><strong>通过flex属性可以很轻松的完成圣杯布局。</strong></p>\n<h2 id=\"子元素排序（order属性）-了解\"><a href=\"#子元素排序（order属性）-了解\" class=\"headerlink\" title=\"子元素排序（order属性）(了解)\"></a>子元素排序（order属性）(了解)</h2><blockquote>\n<p>在不能修改html结构的时候，要求改变子元素的属性，此时可以使用order属性设置</p>\n</blockquote>\n<p><strong>作用：</strong> 设置弹性盒子中子元素的排列顺序，<strong>数值越小，排列靠前，默认是0</strong></p>\n<p><strong>代码：</strong> <code>order：数字;</code></p>\n<h2 id=\"单个子元素侧轴对齐方式（align-self）\"><a href=\"#单个子元素侧轴对齐方式（align-self）\" class=\"headerlink\" title=\"单个子元素侧轴对齐方式（align-self）\"></a>单个子元素侧轴对齐方式（align-self）</h2><blockquote>\n<p>可以通过 <code>align-self</code> 属性设置单个子元素侧轴的对齐方式</p>\n</blockquote>\n<p><strong>作用：</strong> 设置单个子元素在侧轴的对齐方式</p>\n<p><strong>取值（和align-items取值一样）：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">取值</th>\n<th align=\"center\">效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">flex-start</td>\n<td align=\"center\">向侧轴的开始位置对齐（默认相当于顶部对齐）</td>\n</tr>\n<tr>\n<td align=\"center\">flex-end</td>\n<td align=\"center\">向侧轴的结束位置对齐（默认相当于底部对齐）</td>\n</tr>\n<tr>\n<td align=\"center\">center</td>\n<td align=\"center\">居中对齐</td>\n</tr>\n<tr>\n<td align=\"center\">stretch</td>\n<td align=\"center\">子元素高度拉伸显示（只有没设高才有效果）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>对于其他内容有兴趣可以看看<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">阮一峰的博客</a></p>\n</blockquote>\n<h5 id=\"ヾ-๑╹◡╹-ﾉ”-六面神骰\"><a href=\"#ヾ-๑╹◡╹-ﾉ”-六面神骰\" class=\"headerlink\" title=\"ヾ(๑╹◡╹)ﾉ” 六面神骰\"></a>ヾ(๑╹◡╹)ﾉ” 六面神骰</h5><h5 id=\"ヾ-๑╹◡╹-ﾉ”-携程在线\"><a href=\"#ヾ-๑╹◡╹-ﾉ”-携程在线\" class=\"headerlink\" title=\"ヾ(๑╹◡╹)ﾉ” 携程在线\"></a>ヾ(๑╹◡╹)ﾉ” 携程在线</h5><blockquote>\n<p>flex布局虽然与一定的兼容性问题，但是在之后的小程序、vue等等技术中还是会会用到，并且不需要考虑兼容性问题。</p>\n</blockquote>\n<h1 id=\"响应式布局的介绍（了解）\"><a href=\"#响应式布局的介绍（了解）\" class=\"headerlink\" title=\"响应式布局的介绍（了解）\"></a>响应式布局的介绍（了解）</h1><blockquote>\n<p>响应式布局（respond layout）是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是<strong>一个网站能够兼容多个终端（pc、手机、平板）</strong></p>\n</blockquote>\n<h2 id=\"什么是响应式布局\"><a href=\"#什么是响应式布局\" class=\"headerlink\" title=\"什么是响应式布局\"></a>什么是响应式布局</h2><p><strong>早期：</strong> </p>\n<blockquote>\n<p>同一个页面需要开发不同设备的版本，公司开发成本较高</p>\n</blockquote>\n<ul>\n<li>pc端需要开发写一套页面，专门给pc端看</li>\n<li>移动端再开发一套页面，专门给移动端看</li>\n</ul>\n<p><strong>响应式布局（记忆）：</strong></p>\n<blockquote>\n<p>同一个页面只需要开发一套网页，公司开发成本较低，但是员工开发难度更高</p>\n</blockquote>\n<ul>\n<li>只需要写一套代码，同时给pc端和移动端看</li>\n</ul>\n<p>看看微金所项目~</p>\n<p><strong>响应式开发的原理（记忆）</strong></p>\n<p><strong><em>动态根据当前屏幕的宽度，自动改变页面中盒子的宽度、盒子的显示或隐藏</em></strong></p>\n<p><strong>响应式开发的优缺点</strong></p>\n<p><strong>优点：</strong> </p>\n<ul>\n<li>对于不同设备只需要开发一套网页即可，公司开发成本较低</li>\n<li>一套网页可以适配多个终端</li>\n</ul>\n<p>*<em>缺点： *</em></p>\n<ul>\n<li>一个页面需要兼容多个终端，考虑的情况多种，开发效率较慢</li>\n<li>代码会更多，网页的加载速度较慢</li>\n</ul>\n<h2 id=\"响应式开发的现状\"><a href=\"#响应式开发的现状\" class=\"headerlink\" title=\"响应式开发的现状\"></a>响应式开发的现状</h2><blockquote>\n<p>在国内并不是很流行，国外较多</p>\n</blockquote>\n<ul>\n<li><p>如果已经有了一套pc端网页，此时直接再写一套移动端网页即可，此时不需要使用响应式布局（比如：京东、淘宝）</p>\n</li>\n<li><p>如果开发一套网页都没有，是<strong>新建的项目</strong>，此时可以考虑使用响应式，写一套即可兼容多个设备。</p>\n</li>\n<li><p>比较<strong>简单的网页</strong>，可以考虑使用响应式，但是复杂的网页考虑的情况会很多，一般不用。</p>\n</li>\n</ul>\n<h2 id=\"响应式开发与pc-移动开发的比较\"><a href=\"#响应式开发与pc-移动开发的比较\" class=\"headerlink\" title=\"响应式开发与pc+移动开发的比较\"></a>响应式开发与pc+移动开发的比较</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th align=\"center\">pc端+移动端网页开发</th>\n<th align=\"center\">响应式开发</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">应用场景</td>\n<td align=\"center\">已有pc端网页，只需要再开发一套移动端网页即可</td>\n<td align=\"center\">对于新建网页，可以使用响应式写一套兼容多个设备即可</td>\n</tr>\n<tr>\n<td align=\"center\">开发效率</td>\n<td align=\"center\">针对性强，<strong>开发效率高</strong></td>\n<td align=\"center\">需要兼容各种终端，考虑情况更多，开发效率低</td>\n</tr>\n<tr>\n<td align=\"center\">适配情况</td>\n<td align=\"center\">只能适配移动端或者PC端，其他设备（平板）体验较差</td>\n<td align=\"center\">可以<strong>适配各种终端</strong></td>\n</tr>\n<tr>\n<td align=\"center\">加载速度</td>\n<td align=\"center\">代码简洁，<strong>加载快</strong></td>\n<td align=\"center\">代码相对复杂，加载慢</td>\n</tr>\n</tbody></table>\n<h1 id=\"响应式开发的屏幕分类\"><a href=\"#响应式开发的屏幕分类\" class=\"headerlink\" title=\"响应式开发的屏幕分类\"></a>响应式开发的屏幕分类</h1><blockquote>\n<p>在响应式开发中需要动态根据屏幕的宽度改变样式，但是不可能每变化1px就改变样式。</p>\n<p>在响应式开发中，把各种屏幕宽度分为四大类！！</p>\n</blockquote>\n<h2 id=\"设备屏幕的分类\"><a href=\"#设备屏幕的分类\" class=\"headerlink\" title=\"设备屏幕的分类\"></a>设备屏幕的分类</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分类名称</th>\n<th align=\"center\">宽度范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">超小屏设备</td>\n<td align=\"center\">0 ~ 768px</td>\n</tr>\n<tr>\n<td align=\"center\">小屏设备</td>\n<td align=\"center\">768px ~ 992px</td>\n</tr>\n<tr>\n<td align=\"center\">中屏设备</td>\n<td align=\"center\">992px ~ 1200px</td>\n</tr>\n<tr>\n<td align=\"center\">超小屏设备</td>\n<td align=\"center\">1200px ~ 正无穷</td>\n</tr>\n</tbody></table>\n<p><img src=\"mdImg/1.png\" alt=\"1\"></p>\n<h1 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h1><blockquote>\n<p>刚刚说了响应式原理是：<strong><em>动态根据当前屏幕的宽度，自动改变页面中盒子的宽度、盒子的显示或隐藏</em></strong></p>\n<p>所以需要根据不同屏幕的宽度改变样式。</p>\n<p>可以通过css3中新增的媒体查询完成效果。</p>\n</blockquote>\n<p><strong>媒体查询（Media Query）：</strong>是CSS3新增的方法，可以通过动态查询屏幕的宽度，根据不同的屏幕宽度设置样式是否生效！！</p>\n<p><strong>语法：</strong> </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 只有当条件满足时，媒体查询的中的选择器才会生效！ */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (条件) &#123;</span><br><span class=\"line\">    选择器......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">条件：</span></span><br><span class=\"line\"><span class=\"comment\">    1、min-width：样式生效的屏幕最小宽度——》</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t\t屏幕宽度大于等于该宽度时，样式才生效</span></span><br><span class=\"line\"><span class=\"comment\">    2、max-width：样式生效的屏幕最大宽度——》</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t\t屏幕宽度小于等于该宽度时，样式才会生效</span></span><br><span class=\"line\"><span class=\"comment\">    3、width：样式生效的屏幕宽度——》</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t只有当屏幕宽度正好等于该宽度时，样式才生效 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------以下是具体的例子-----------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">样式生效的最小宽为600px——》只有当屏幕宽度大于等于600px时，样式才会生效！！</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">600px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">样式生效的最大宽为800px——》只有当屏幕宽度小于等于800px时，样式才会生效</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width:<span class=\"number\">800px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">样式在 600~800中间生效</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">600px</span>) and (max-width:<span class=\"number\">800px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">样式只在700px宽度的时候才会生效</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (width:<span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: purple;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点：</strong></p>\n<ul>\n<li>媒体查询只是给选择器设置了条件，并不能提升选择器的优先级</li>\n<li>媒体查询可以同时设置多个条件，中间以and连接即可</li>\n</ul>\n<h2 id=\"使用媒体查询完成响应式适配\"><a href=\"#使用媒体查询完成响应式适配\" class=\"headerlink\" title=\"使用媒体查询完成响应式适配\"></a>使用媒体查询完成响应式适配</h2><blockquote>\n<p>可以通过媒体查询实现不同终端的布局和样式的切换，完成响应式布局。</p>\n</blockquote>\n<p><strong>需求：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">需求：</span></span><br><span class=\"line\"><span class=\"comment\">\t超小屏幕: 0 - 768px      \t版心：100% \t背景颜色：绿色</span></span><br><span class=\"line\"><span class=\"comment\">\t小屏设备: 768px - 992px  \t版心：750px \t背景颜色：蓝色</span></span><br><span class=\"line\"><span class=\"comment\">\t中屏设备: 992px - 1200px \t版心：970px \t背景颜色：黄色</span></span><br><span class=\"line\"><span class=\"comment\">\t大屏设备: 1200 ~  正无穷     版心：1170px   背景颜色：粉色</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端：现在只有一个div，要做一套响应式布局，就需要如此多的代码，非常的麻烦。真正开发中我们会借助一些响应式的框架，比如bootstrap。</strong></p>\n","text":"学习目标 能够说出响应式开发的基本概念 了解响应式开发的原理 了解bootstrap的栅格系统的使用。。。。。。理解上课的知识点……弹性布局(伸缩布局)布局：其实就是调整元素在水平和垂直方向上的布局方式。css3在布局中提出了flex布局（弹性布局）的方法，这种布局方式让我们对于","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-07-21T11:11:48.095Z","updated":"2019-07-21T11:11:48.095Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}